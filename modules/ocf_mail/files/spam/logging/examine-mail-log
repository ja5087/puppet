#!/usr/bin/env python3
import json
import pwd
import re
import sys
from collections import Counter
from collections import defaultdict

from ocflib.account.utils import is_in_group


# number of messages a single account can send per day without being flagged
USER_MAIL_PER_DAY = 45
VHOST_MAIL_PER_DAY = 75

REGEX_EXTRACT_DOMAIN = re.compile('^.*@(.*)$')
REGEX_EXTRACT_USER = re.compile('^(.*)@.*$')

# users that others are allowed to send mail as
USER_EXCEPTIONS = {'root', 'apache', 'wordpress', 'decal', 'noreply'}

# users that are allowed to send infinite mail and impersonate others
SYSTEM_USERS = {'ocfweb'}


def get_user_from_uid(uid):
    try:
        uid = int(uid)
        return pwd.getpwuid(uid).pw_name
    except (KeyError, ValueError, TypeError):
        pass


def extract_domain(addr):
    """Returns domain portion of email address."""
    if not addr:
        return

    match = REGEX_EXTRACT_DOMAIN.match(addr)
    if match:
        return match.group(1)


def extract_user(addr):
    """Returns user portion of email address."""
    if not addr:
        return

    match = REGEX_EXTRACT_USER.match(addr)
    if match:
        return match.group(1)


def examine_mail(mail):
    """Examine a JSON dict of mail, yielding problem tuples."""

    from_name, from_addr = mail['from']
    from_domain = extract_domain(from_addr)
    smtp_user = mail.get('smtp_user')
    try:
        uid = int(mail.get('uid'))
    except TypeError:
        uid = -1
    user = get_user_from_uid(uid)

    to_name, to_addr = mail['to']

    if uid >= 1000 and user and user not in SYSTEM_USERS:
        if from_domain == 'ocf.berkeley.edu':
            from_user = extract_user(from_addr)

            if from_user:
                if from_user != user and from_user not in USER_EXCEPTIONS:
                    if not is_in_group(user, 'ocfstaff') or from_user != 'help':
                        yield ("From @ocf but user doesn't match",
                               'from {}, should be {} (uid {})'.format(from_user, user, uid))
            else:
                yield "From @ocf but user doesn't make sense", 'from ' + from_addr
        elif smtp_user and smtp_user != from_addr:
            yield ("From address doesn't match authenticated sender address",
                   'from {}, should be {}'.format(from_addr, smtp_user))
        else:
            """We could use this to detect if someone is sending mail from our
            servers with a bad From address, but unfortunately it's extremely
            common (and basically allowed; think contact forms and such).

            if not is_vhost_domain(from_domain):
                yield "Not from @ocf", "instead from " + from_addr
            """


def sending_too_much_mail(entry):
    """Returns whether the given user has sent out too many emails.

    Args:
        entry: a (uid, count) tuple
    """
    uid, count = entry
    try:
        user = get_user_from_uid(uid)
        return int(uid) >= 1000 and count > USER_MAIL_PER_DAY and user not in SYSTEM_USERS
    except TypeError:
        return False  # no uid, so can't flag them


def vhost_sending_too_much_mail(entry):
    """Returns whether the given vhost address has sent out too many emails.

    Args:
        entry: a (address, count) tuple
    """
    addr, count = entry
    return count > VHOST_MAIL_PER_DAY


if __name__ == '__main__':
    problems = defaultdict(lambda: defaultdict(list))
    mail_count = Counter()
    vhost_mail_count = Counter()

    for mail in map(json.loads, sys.stdin):
        from_name, from_addr = mail['from']
        from_domain = extract_domain(from_addr)

        smtp_user = mail.get('smtp_user')
        uid = mail.get('uid')

        if smtp_user:
            vhost_mail_count[smtp_user] += 1
        elif uid:
            mail_count[uid] += 1

        for problem, details in examine_mail(mail):
            problems[uid][problem].append((mail, details))

    if problems:
        for uid, user_problems in problems.items():
            user = get_user_from_uid(uid)

            print('Problems for user {} (uid {}):'.format(user, uid))

            for problem, examples in user_problems.items():
                print('- {}:'.format(problem))

                for msg, details in examples:
                    print('  - {}:'.format(details))

                    for key in ('from', 'to', 'date', 'relay'):
                        print('    {}: {}'.format(key, msg.get(key)))

                    print()

            print()

    too_much_mail = list(filter(sending_too_much_mail, mail_count.items()))
    vhost_too_much_mail = list(filter(vhost_sending_too_much_mail, vhost_mail_count.items()))

    if too_much_mail:
        print('Users sending too much mail:')

        for uid, count in sorted(too_much_mail, key=lambda x: x[1], reverse=True):
            user = get_user_from_uid(uid)
            print('- {} (uid {}): {}'.format(user, uid, count))

    if vhost_too_much_mail:
        print('Vhost addresses sending too much mail:')

        for addr, count in sorted(vhost_too_much_mail, key=lambda x: x[1], reverse=True):
            print('- {}: {}'.format(addr, count))
